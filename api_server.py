"""
FastAPI Server –¥–ª—è Telegram Manager
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–ø–∞–Ω–µ–ª—å—é –∏ Supabase
–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime, timedelta
import logging
import json
import os
from pathlib import Path

from telegram_core import TelegramCoreManager

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = FastAPI(
    title="Telegram Manager API",
    version="2.0",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"
)

# CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Supabase –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://wdmyvtyvalcczvittgci.supabase.co",
        "http://localhost:3000",
        "http://localhost:8000",
        "*"  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Telegram —Å–µ—Å—Å–∏–π
telegram_manager = TelegramCoreManager()

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SETTINGS_FILE = "user_settings.json"
SESSIONS_FILE = "sessions_data.json"

# ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

class AuthStartRequest(BaseModel):
    user_id: str  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ str –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Supabase UUID
    phone: str


class AuthCodeRequest(BaseModel):
    user_id: str
    code: str
    phone_code_hash: str


class AuthPasswordRequest(BaseModel):
    user_id: str
    password: str


class AccountInfo(BaseModel):
    user_id: str
    phone: str
    status: str = "active"


class BroadcastRequest(BaseModel):
    user_id: str
    account_phone: str
    text: str
    delay_seconds: int = 30
    chat_ids: Optional[List[int]] = None
    file_path: Optional[str] = None


class TemplateCreate(BaseModel):
    user_id: str
    name: str
    text: str
    media_type: Optional[str] = None
    file_path: Optional[str] = None


class InstantSettingsRequest(BaseModel):
    user_id: str
    account_phone: str
    enabled: bool
    template_name: Optional[str] = None
    delay_seconds: int = 30


# ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –î–ê–ù–ù–´–• =====

def load_json_file(filename: str) -> dict:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}


def save_json_file(filename: str, data: dict):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")


def get_user_data(user_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_json_file(SETTINGS_FILE)
    
    if user_id not in settings:
        settings[user_id] = {
            'accounts': {},  # phone -> {status, auth_date}
            'templates': {},
            'instant_settings': {},  # phone -> {enabled, template, delay}
            'stats': {
                'sent': 0,
                'success': 0,
                'failed': 0
            }
        }
        save_json_file(SETTINGS_FILE, settings)
    
    return settings[user_id]


def update_user_data(user_id: str, data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_json_file(SETTINGS_FILE)
    
    if user_id not in settings:
        settings[user_id] = {}
    
    settings[user_id].update(data)
    save_json_file(SETTINGS_FILE, settings)


def save_session_info(user_id: str, phone: str, phone_code_hash: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏"""
    sessions = load_json_file(SESSIONS_FILE)
    sessions[f"{user_id}:{phone}"] = {
        'phone_code_hash': phone_code_hash,
        'timestamp': datetime.now().isoformat()
    }
    save_json_file(SESSIONS_FILE, sessions)


def get_session_info(user_id: str, phone: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏"""
    sessions = load_json_file(SESSIONS_FILE)
    return sessions.get(f"{user_id}:{phone}", {})


# ===== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê =====

@app.get("/", response_class=HTMLResponse)
async def serve_web_panel():
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"""
    try:
        panel_path = Path("web_panel.html")
        if panel_path.exists():
            return FileResponse(panel_path)
        else:
            return HTMLResponse(
                content="""
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Telegram Manager</title>
                    <style>
                        body {
                            font-family: Arial, sans-serif;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            height: 100vh;
                            margin: 0;
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            color: white;
                        }
                        .container {
                            text-align: center;
                            padding: 40px;
                            background: rgba(255,255,255,0.1);
                            border-radius: 20px;
                            backdrop-filter: blur(10px);
                        }
                        h1 { margin: 0 0 20px 0; }
                        a { color: #fff; text-decoration: underline; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üöÄ Telegram Manager API</h1>
                        <p>API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</p>
                        <p>üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: <a href="/docs">/docs</a></p>
                        <p>üíö –°—Ç–∞—Ç—É—Å: <a href="/health">/health</a></p>
                    </div>
                </body>
                </html>
                """,
                status_code=200
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏")


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Render"""
    return {
        "status": "healthy",
        "service": "Telegram Manager API",
        "version": "2.0",
        "timestamp": datetime.now().isoformat()
    }


@app.get("/api/status")
async def api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API"""
    return {
        "status": "online",
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        "endpoints": {
            "auth": "/api/auth/*",
            "accounts": "/api/accounts/*",
            "templates": "/api/templates/*",
            "broadcast": "/api/broadcast",
            "docs": "/docs"
        }
    }


# ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø TELEGRAM =====

@app.post("/api/auth/start")
async def start_auth(request: AuthStartRequest):
    """–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userbot = await telegram_manager.create_session(
            int(request.user_id) if request.user_id.isdigit() else hash(request.user_id),
            request.phone
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        phone_code_hash = await userbot.send_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        save_session_info(request.user_id, request.phone, phone_code_hash)
        
        return {
            "success": True,
            "phone_code_hash": phone_code_hash,
            "message": f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {request.phone}"
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ auth/start: {e}")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")


@app.post("/api/auth/verify-code")
async def verify_code(request: AuthCodeRequest):
    """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏–∑ Telegram"""
    try:
        user_hash = int(request.user_id) if request.user_id.isdigit() else hash(request.user_id)
        userbot = telegram_manager.get_session(user_hash)
        
        if not userbot:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ")
        
        result = await userbot.sign_in(request.code, request.phone_code_hash)
        
        if result.get("success"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = get_user_data(request.user_id)
            if 'accounts' not in user_data:
                user_data['accounts'] = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            me = await userbot.client.get_me()
            
            user_data['accounts'][me.phone] = {
                'status': 'active',
                'username': me.username or '–ù–µ—Ç username',
                'first_name': me.first_name or '',
                'auth_date': datetime.now().isoformat()
            }
            
            update_user_data(request.user_id, user_data)
            
            return {
                "success": True,
                "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
                "account": {
                    "phone": me.phone,
                    "username": me.username,
                    "name": f"{me.first_name or ''} {me.last_name or ''}".strip()
                }
            }
        elif result.get("needs_password"):
            return {
                "success": False,
                "needs_password": True,
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å"
            }
        else:
            raise HTTPException(
                status_code=400,
                detail=result.get("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
            )
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ verify-code: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/api/auth/verify-password")
async def verify_password(request: AuthPasswordRequest):
    """–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –ø–∞—Ä–æ–ª—è"""
    try:
        user_hash = int(request.user_id) if request.user_id.isdigit() else hash(request.user_id)
        userbot = telegram_manager.get_session(user_hash)
        
        if not userbot:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        success = await userbot.check_password(request.password)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            me = await userbot.client.get_me()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            user_data = get_user_data(request.user_id)
            if 'accounts' not in user_data:
                user_data['accounts'] = {}
            
            user_data['accounts'][me.phone] = {
                'status': 'active',
                'username': me.username or '–ù–µ—Ç username',
                'first_name': me.first_name or '',
                'auth_date': datetime.now().isoformat()
            }
            
            update_user_data(request.user_id, user_data)
            
            return {
                "success": True,
                "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!",
                "account": {
                    "phone": me.phone,
                    "username": me.username,
                    "name": f"{me.first_name or ''} {me.last_name or ''}".strip()
                }
            }
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ verify-password: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò =====

@app.get("/api/accounts/{user_id}")
async def get_accounts(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = get_user_data(user_id)
        accounts = user_data.get('accounts', {})
        
        return {
            "success": True,
            "accounts": [
                {
                    "phone": phone,
                    "status": info.get('status', 'unknown'),
                    "username": info.get('username', ''),
                    "first_name": info.get('first_name', ''),
                    "auth_date": info.get('auth_date', '')
                }
                for phone, info in accounts.items()
            ],
            "total": len(accounts)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ get_accounts: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.delete("/api/accounts/{user_id}/{phone}")
async def delete_account(user_id: str, phone: str):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        user_data = get_user_data(user_id)
        
        if phone in user_data.get('accounts', {}):
            del user_data['accounts'][phone]
            update_user_data(user_id, user_data)
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            user_hash = int(user_id) if user_id.isdigit() else hash(user_id)
            await telegram_manager.remove_session(user_hash)
            
            return {
                "success": True,
                "message": f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É–¥–∞–ª—ë–Ω"
            }
        else:
            raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ delete_account: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# ===== –®–ê–ë–õ–û–ù–´ =====

@app.get("/api/templates/{user_id}")
async def get_templates(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã"""
    try:
        user_data = get_user_data(user_id)
        templates = user_data.get('templates', {})
        
        return {
            "success": True,
            "templates": [
                {
                    "name": name,
                    "text": info.get('text', ''),
                    "media_type": info.get('media_type'),
                    "created_at": info.get('created_at', '')
                }
                for name, info in templates.items()
            ],
            "total": len(templates)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ get_templates: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/api/templates/create")
async def create_template(request: TemplateCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
    try:
        user_data = get_user_data(request.user_id)
        
        if 'templates' not in user_data:
            user_data['templates'] = {}
        
        if request.name in user_data['templates']:
            raise HTTPException(status_code=400, detail="–®–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        user_data['templates'][request.name] = {
            'text': request.text,
            'media_type': request.media_type,
            'file_path': request.file_path,
            'created_at': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        
        update_user_data(request.user_id, user_data)
        
        return {
            "success": True,
            "message": f"–®–∞–±–ª–æ–Ω '{request.name}' —Å–æ–∑–¥–∞–Ω"
        }
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ create_template: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.delete("/api/templates/{user_id}/{template_name}")
async def delete_template(user_id: str, template_name: str):
    """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω"""
    try:
        user_data = get_user_data(user_id)
        
        if template_name in user_data.get('templates', {}):
            del user_data['templates'][template_name]
            update_user_data(user_id, user_data)
            
            return {
                "success": True,
                "message": f"–®–∞–±–ª–æ–Ω '{template_name}' —É–¥–∞–ª—ë–Ω"
            }
        else:
            raise HTTPException(status_code=404, detail="–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ delete_template: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# ===== –†–ê–°–°–´–õ–ö–ê =====

@app.post("/api/broadcast")
async def broadcast_message(request: BroadcastRequest, background_tasks: BackgroundTasks):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        user_hash = int(request.user_id) if request.user_id.isdigit() else hash(request.user_id)
        userbot = telegram_manager.get_session(user_hash)
        
        if not userbot:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        all_dialogs = await userbot.get_dialogs()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º
        if request.chat_ids:
            dialogs = [d for d in all_dialogs if d['id'] in request.chat_ids]
        else:
            dialogs = all_dialogs
        
        if not dialogs:
            raise HTTPException(status_code=400, detail="–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        schedule_dt = datetime.now() + timedelta(seconds=request.delay_seconds)
        
        successful, failed = await userbot.broadcast_message(
            dialogs,
            request.text,
            schedule_dt
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_data = get_user_data(request.user_id)
        stats = user_data.get('stats', {'sent': 0, 'success': 0, 'failed': 0})
        stats['sent'] += len(dialogs)
        stats['success'] += successful
        stats['failed'] += failed
        user_data['stats'] = stats
        update_user_data(request.user_id, user_data)
        
        return {
            "success": True,
            "total": len(dialogs),
            "successful": successful,
            "failed": failed,
            "schedule_time": schedule_dt.isoformat()
        }
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ broadcast: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# ===== –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê =====

@app.post("/api/instant/settings")
async def save_instant_settings(request: InstantSettingsRequest):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        user_data = get_user_data(request.user_id)
        
        if 'instant_settings' not in user_data:
            user_data['instant_settings'] = {}
        
        user_data['instant_settings'][request.account_phone] = {
            'enabled': request.enabled,
            'template_name': request.template_name,
            'delay_seconds': request.delay_seconds,
            'updated_at': datetime.now().isoformat()
        }
        
        update_user_data(request.user_id, user_data)
        
        return {
            "success": True,
            "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ save_instant_settings: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/instant/settings/{user_id}/{phone}")
async def get_instant_settings(user_id: str, phone: str):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        user_data = get_user_data(user_id)
        settings = user_data.get('instant_settings', {}).get(phone, {
            'enabled': False,
            'template_name': None,
            'delay_seconds': 30
        })
        
        return {
            "success": True,
            "settings": settings
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ get_instant_settings: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

@app.get("/api/stats/{user_id}")
async def get_stats(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = get_user_data(user_id)
        
        return {
            "success": True,
            "accounts": len(user_data.get('accounts', {})),
            "templates": len(user_data.get('templates', {})),
            "sent": user_data.get('stats', {}).get('sent', 0),
            "success": user_data.get('stats', {}).get('success', 0)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ get_stats: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====

if __name__ == "__main__":
    import uvicorn
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
    port = int(os.environ.get("PORT", 10000))
    
    print("=" * 80)
    print("üöÄ Telegram Manager API Server v2.0")
    print("=" * 80)
    print(f"\nüì° –ó–∞–ø—É—Å–∫ –Ω–∞ 0.0.0.0:{port}")
    print(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://0.0.0.0:{port}/docs")
    print(f"üíö Health Check: http://0.0.0.0:{port}/health")
    print(f"üåê –í–µ–±-–ø–∞–Ω–µ–ª—å: http://0.0.0.0:{port}/")
    print("\n" + "=" * 80)
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )
