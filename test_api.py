"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
–ó–∞–ø—É—Å–∫: python test_api.py
"""

import requests
import time

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –Ω–∞ Render)
API_URL = "http://localhost:8000"
# API_URL = "https://telegram-scheduler-api.onrender.com"

USER_ID = 123456  # –¢–µ—Å—Ç–æ–≤—ã–π ID
PHONE = "+79991234567"  # –í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞


def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health...")
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Health check: OK")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def test_root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ root endpoint"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ root endpoint...")
    try:
        response = requests.get(f"{API_URL}/")
        if response.status_code == 200:
            print("‚úÖ Root endpoint: OK")
            data = response.json()
            print(f"   Service: {data.get('service')}")
            print(f"   Version: {data.get('version')}")
            return True
        else:
            print(f"‚ùå Root endpoint failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_docs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    try:
        response = requests.get(f"{API_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ Swagger docs: OK")
            print(f"   URL: {API_URL}/docs")
            return True
        else:
            print(f"‚ùå Docs failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_auth_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ auth/status...")
    try:
        response = requests.get(f"{API_URL}/auth/status/{USER_ID}")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Auth status: OK")
            print(f"   Authorized: {data.get('authorized')}")
            print(f"   Message: {data.get('message')}")
            return True
        else:
            print(f"‚ùå Auth status failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_auth_start():
    """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä)"""
    print("\n‚ö†Ô∏è  –¢–µ—Å—Ç auth/start –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä)")
    print(f"   –ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
    print(f"   POST {API_URL}/auth/start")
    print(f"   Body: {{'user_id': {USER_ID}, 'phone': '{PHONE}'}}")
    return None


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("=" * 70)
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Scheduler API")
    print("=" * 70)
    print(f"üì° API URL: {API_URL}")
    print(f"üë§ Test User ID: {USER_ID}")
    
    results = {
        "Health Check": test_health(),
        "Root Endpoint": test_root(),
        "Swagger Docs": test_docs(),
        "Auth Status": test_auth_status(),
        "Auth Start": test_auth_start(),
    }
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 70)
    
    passed = sum(1 for v in results.values() if v is True)
    failed = sum(1 for v in results.values() if v is False)
    skipped = sum(1 for v in results.values() if v is None)
    
    for test_name, result in results.items():
        if result is True:
            status = "‚úÖ PASS"
        elif result is False:
            status = "‚ùå FAIL"
        else:
            status = "‚è≠Ô∏è  SKIP"
        print(f"{status} - {test_name}")
    
    print("\n" + "=" * 70)
    print(f"‚úÖ Passed: {passed}")
    print(f"‚ùå Failed: {failed}")
    print(f"‚è≠Ô∏è  Skipped: {skipped}")
    print("=" * 70)
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é!")
    else:
        print(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
    
    return failed == 0


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)